/*
 * Swagger Moodle - OpenAPI 3.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.11
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CourseApiController : ControllerBase
    {
        /// <summary>
        /// delete course
        /// </summary>
        /// <remarks>delete course</remarks>
        /// <response code="0">Default error sample response</response>
        //[HttpDelete]
        //[Route("/api/v3/course")]
        //[ValidateModelState]
        //[SwaggerOperation("4")]
        // public virtual IActionResult 4()
        //{ 
        //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(0);

        //throw new NotImplementedException(); 


        /// <summary>
        /// Add a new course
        /// </summary>
        /// <remarks>Add a new course</remarks>
        /// <param name="body">Create course</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid input</response>
        /// <response code="422">Validation exception</response>
        [HttpPost]
        [Route("/api/v3/course")]
        [ValidateModelState]
        [SwaggerOperation("Addcourse")]
        [SwaggerResponse(statusCode: 200, type: typeof(Courses), description: "Successful operation")]
        public virtual IActionResult Addcourse([FromBody] Courses body)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Courses));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422);
            string exampleJson = null;
            exampleJson = "{\n  \"code\" : \"DDDDD\",\n  \"name\" : \"Matematika\",\n  \"id\" : 10,\n  \"credit\" : 0\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Courses>(exampleJson)
            : default(Courses);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Finds course by name
        /// </summary>
        /// <remarks>one name</remarks>
        /// <param name="tags">Tags to filter by</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid tag value</response>
        [HttpGet]
        [Route("/api/v3/course/findByName")]
        [ValidateModelState]
        [SwaggerOperation("FindCourseByName")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Courses>), description: "successful operation")]
        public virtual IActionResult FindCourseByName([FromQuery] string tags)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Courses>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"code\" : \"DDDDD\",\n  \"name\" : \"Matematika\",\n  \"id\" : 10,\n  \"credit\" : 0\n}, {\n  \"code\" : \"DDDDD\",\n  \"name\" : \"Matematika\",\n  \"id\" : 10,\n  \"credit\" : 0\n} ]";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Courses>>(exampleJson)
            : default(List<Courses>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Finds course by code
        /// </summary>
        /// <remarks>Multiple code values can be provided with comma separated strings</remarks>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid code value</response>
        [HttpGet]
        [Route("/api/v3/course/findByCode")]
        [ValidateModelState]
        [SwaggerOperation("FindCourseByStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Courses>), description: "successful operation")]
        public virtual IActionResult FindCourseByStatus([FromQuery] string status)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Courses>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"code\" : \"DDDDD\",\n  \"name\" : \"Matematika\",\n  \"id\" : 10,\n  \"credit\" : 0\n}, {\n  \"code\" : \"DDDDD\",\n  \"name\" : \"Matematika\",\n  \"id\" : 10,\n  \"credit\" : 0\n} ]";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Courses>>(exampleJson)
            : default(List<Courses>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update an existing course
        /// </summary>
        /// <remarks>Update an existing course by Id</remarks>
        /// <param name="body">Update an existent course</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Course not found</response>
        /// <response code="422">Validation exception</response>
        [HttpPut]
        [Route("/api/v3/course")]
        [ValidateModelState]
        [SwaggerOperation("UpdateCourse")]
        [SwaggerResponse(statusCode: 200, type: typeof(Courses), description: "Successful operation")]
        public virtual IActionResult UpdateCourse([FromBody] Courses body)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Courses));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422);
            string exampleJson = null;
            exampleJson = "{\n  \"code\" : \"DDDDD\",\n  \"name\" : \"Matematika\",\n  \"id\" : 10,\n  \"credit\" : 0\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Courses>(exampleJson)
            : default(Courses);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
    

